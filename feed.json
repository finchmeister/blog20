{
    "version": "https://jsonfeed.org/version/1",
    "title": "Personal Blog of Jonathan Finch",
    "home_page_url": "https://finchmeister.github.io/blog20/",
    "feed_url": "https://finchmeister.github.io/blog20/feed.json",
    "description": "Personal Blog of Jonathan Finch",
    "icon": "https://finchmeister.github.io/blog20/apple-touch-icon.png",
    "favicon": "https://finchmeister.github.io/blog20/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Jonathan Finch",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://finchmeister.github.io/blog20/2020/10/31/raspberry-pi-temp-logger",
            "title": "Alexa Raspberry Pi Temperature Sensor",
            "summary": "How to set up a Raspberry Pi Temperature Sensor",
            "content_text": "In this article I will share how I put together an Alexa connected Raspberry Pi temperature sensor using a novel data store.      “Alexa, room temperature?”  “The temperature is 18 degrees celcius (recorded 1 minute ago)”Setting Up the PiFor this project, I used an old Raspberry Pi 2 model with a USB WiFi dongle and a DHT22 temperature sensor.The temperature sensor is connected to the Pi as follows:Pi              DHT22 ---             ---      Pin 1           3.3v power (+)Pin 7 (GPIO4)   GPIO data outPin 9           Ground (-)I setup the Raspberry Pi in headless mode with Raspbian Lite.Recording the TemperatureTo access the temperature data, I used the Python Adafruit DHT library which I installed with pip3:sudo apt-get install git screen python3-pip -ysudo python3 -m pip install --upgrade pip setuptools wheelsudo pip3 install Adafruit_DHTIn its simplest form, here is how we can get the temperature from the sensor:import Adafruit_DHTsensor = Adafruit_DHT.DHT22sensor_gpio = 4humidity, temperature = Adafruit_DHT.read_retry(sensor, sensor_gpio)print(\"Temp: %.2f, Humidity: %.2f\" % (temperature, humidity))# Temp: 19.92, Humidity: 0.83Making the Data Accessible to AlexaAlexa needs access to the temperature data for her to voice it back. An option would be to expose the Pi to the web for Alexa to access the data directly but that would involve running a web-server on the Pi and a lot of modified router configuration to expose the Pi to the public internet.Instead, I realised that a public git repository could work as a novel place to store this data.Every time a temperature recording is made, the data can be committed to a repository and pushed to GitHub, then Alexa would be able to fetch the most recent recording from the raw content of the data file. It would also offer a full history of every temperature recording with delta compression for free.Of course, open-sourcing my room temperature data could pose a security risk. It may be possible to infer when I am in the room or not from the data, and perhaps this could be used for malicious purposes…?SetupI created a new GitHub user and repository, and added the public SSH key from the Pi to GitHub for commit access.The following script records the temperature data and pushes it to GitHub:import timeimport datetimeimport jsonimport Adafruit_DHTimport osinterval = int(os.getenv(\"INTERVAL\", 120))measurement = \"rpi-dht22\"location = \"bedroom\"# Temp sensorsensor = Adafruit_DHT.DHT22sensor_gpio = 4try:    while True:        humidity, temperature = Adafruit_DHT.read_retry(sensor, sensor_gpio)        humidity = round(humidity, 2)        temperature = round(temperature, 2)        iso = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')        print(\"[%s] Temp: %s, Humidity: %s\" % (iso, temperature, humidity))        data = [            {                \"measurement\": measurement,                \"tags\": {                    \"location\": location,                },                \"time\": iso,                \"fields\": {                    \"temperature\": temperature,                    \"humidity\": humidity                }            }        ]        f = open(\"/home/pi/bedroom-temperature-api/temperature.json\", \"w\")        f.write(json.dumps(data[0], sort_keys=True, indent=4))        f.close()        os.system(\"cd /home/pi/bedroom-temperature-api &amp;&amp; \"                  \"git add temperature.json \"                  \"&amp;&amp; git commit -m '\" + iso + \"' \"                  \"&amp;&amp; git push origin master\")        time.sleep(interval)except KeyboardInterrupt:    passThe data structure can be posted to Influx DB, which is where I was originally storing the data before the SD card on the Pi randomly corrupted.This script can be run indefinitely in a screen:screen -d -m python3 rpi-temp-sensor/temp-logger-to-gh.pyI added the command below to /etc/rc.local so that it runs on system boot.sudo su - pi -c \"screen -dm -S tempsensor python3 /home/pi/rpi-temp-sensor/temp-logger-to-gh.py\"Creating the Alexa SkillThere are a lot of different ways to build an Alexa skill and it turns out to be a very vast and deep topic. I went down the route of adapting the simplest Hello World example to get things working, after all, I was only looking for Alexa to respond to one thing, I did not need a complex interaction model.In the Alexa Developer console, I created a new custom skill called ‘Rpi Temperature Sensor’ and provisioned it with Alexa-Hosted Python backend resources.Then I set the Skill Invocation Name (the name users say to invoke the skill) to ‘room temperature’. This allows me to say “Alexa, room temperature” for my skill, and thus code, to be executed.Everything else I left as default.As mentioned earlier, the code is based upon the Hello World example.# -*- coding: utf-8 -*-import loggingimport ask_sdk_core.utils as ask_utilsimport requestsfrom datetime import datetimefrom ask_sdk_core.skill_builder import SkillBuilderfrom ask_sdk_core.dispatch_components import AbstractRequestHandlerfrom ask_sdk_core.dispatch_components import AbstractExceptionHandlerfrom ask_sdk_core.handler_input import HandlerInputfrom ask_sdk_model import Responselogger = logging.getLogger(__name__)logger.setLevel(logging.INFO)class LaunchRequestHandler(AbstractRequestHandler):    \"\"\"Handler for Skill Launch.\"\"\"    def can_handle(self, handler_input):        # type: (HandlerInput) -&gt; bool        return ask_utils.is_request_type(\"LaunchRequest\")(handler_input)    def handle(self, handler_input):        # type: (HandlerInput) -&gt; Response        r = requests.get(\"https://raw.githubusercontent.com/raspberry-commits/bedroom-temperature-api/master/temperature.json\")        data = r.json()        speak_output = 'The temperature is %d degrees celcius (recorded %s)' % (data['fields']['temperature'], self.pretty_date(datetime.strptime(data['time'], '%Y-%m-%dT%H:%M:%SZ')))        return (            handler_input.response_builder                .speak(speak_output)                .response        )    def pretty_date(self, time):        now = datetime.now()        diff = now - time        second_diff = diff.seconds        day_diff = diff.days        if day_diff &lt; 0:            return ''        if day_diff == 0:            if second_diff &lt; 10:                return \"just now\"            if second_diff &lt; 60:                return str(int(second_diff)) + \" seconds ago\"            if second_diff &lt; 120:                return \"a minute ago\"            if second_diff &lt; 3600:                return str(int(second_diff / 60)) + \" minutes ago\"            if second_diff &lt; 7200:                return \"an hour ago\"            if second_diff &lt; 86400:                return str(int(second_diff / 3600)) + \" hours ago\"        if day_diff == 1:            return \"Yesterday\"        if day_diff &lt; 7:            return str(day_diff) + \" days ago\"        if day_diff &lt; 31:            return str(int(day_diff / 7)) + \" weeks ago\"        if day_diff &lt; 365:            return str(int(day_diff / 30)) + \" months ago\"        return str(int(day_diff / 365)) + \" years ago\"class CatchAllExceptionHandler(AbstractExceptionHandler):    def can_handle(self, handler_input, exception):        # type: (HandlerInput, Exception) -&gt; bool        return True    def handle(self, handler_input, exception):        # type: (HandlerInput, Exception) -&gt; Response        logger.error(exception, exc_info=True)        speak_output = \"Sorry, I had trouble fetching the room temperature data. Please try again.\"        return (            handler_input.response_builder                .speak(speak_output)                .ask(speak_output)                .response        )sb = SkillBuilder()sb.add_request_handler(LaunchRequestHandler())sb.add_exception_handler(CatchAllExceptionHandler())lambda_handler = sb.lambda_handler()To keep things as simple as possible, I stripped back the example and added my custom code to the LaunchRequestHandler class where the handle method is executed when the skill is launched.The code fetches the temperature data from GitHub and extracts it alongside a human-understandable time since recording for Alexa to speak. E.g.: “The temperature is 18 degrees celcius (recorded 1 minute ago)”.I deployed this from the Alexa console without the need to publish to live. Considering I have no plans to make this public, deploying it to dev, to work on my Alexa alone is sufficient.Now I believe it is possible to use the Alexa Smart Home skills as a basis to make the integration cleaner. For example, if I say, “Alexa, what is the room temperature?”, she gets confused and responds with “Bedroom doesn’t support that”. Ideally, Alexa would respond to that command using the Smart Home interaction model, but I decided building a full integration would take far more effort than I was willing to put in.And that’s it! A Raspberry Pi Temperature sensor logging to GitHub with a very hacky Alexa skill providing a voice interface.",
            "content_html": "<p>In this article I will share how I put together an Alexa connected Raspberry Pi temperature sensor using a novel data store.</p><video width=\"320\" controls=\"\">    <source src=\"/assets/rpi-temp-logger/alexa-room-temp.mp4\" type=\"video/mp4\" /></video><blockquote>  <p>“Alexa, room temperature?”</p>  <p><strong>“The temperature is 18 degrees celcius (recorded 1 minute ago)”</strong></p></blockquote><h3 id=\"setting-up-the-pi\">Setting Up the Pi</h3><p>For this project, I used an old Raspberry Pi 2 model with a USB WiFi dongle and a DHT22 temperature sensor.</p><p>The temperature sensor is connected to the Pi as follows:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Pi              DHT22 ---             ---      Pin 1           3.3v power (+)Pin 7 (GPIO4)   GPIO data outPin 9           Ground (-)</code></pre></div></div><p><img src=\"/assets/rpi-temp-logger/rpi-temp-sensor.jpg\" alt=\"Full commit\" /></p><p>I setup the Raspberry Pi in headless mode with Raspbian Lite.</p><h3 id=\"recording-the-temperature\">Recording the Temperature</h3><p>To access the temperature data, I used the <a href=\"https://github.com/adafruit/Adafruit_Python_DHT\">Python Adafruit DHT library</a> which I installed with pip3:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install git screen python3-pip -ysudo python3 -m pip install --upgrade pip setuptools wheelsudo pip3 install Adafruit_DHT</code></pre></div></div><p>In its simplest form, here is how we can get the temperature from the sensor:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">Adafruit_DHT</span><span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">Adafruit_DHT</span><span class=\"p\">.</span><span class=\"n\">DHT22</span><span class=\"n\">sensor_gpio</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"n\">humidity</span><span class=\"p\">,</span> <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">Adafruit_DHT</span><span class=\"p\">.</span><span class=\"n\">read_retry</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"p\">,</span> <span class=\"n\">sensor_gpio</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Temp: %.2f, Humidity: %.2f\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">temperature</span><span class=\"p\">,</span> <span class=\"n\">humidity</span><span class=\"p\">))</span><span class=\"c1\"># Temp: 19.92, Humidity: 0.83</span></code></pre></div></div><h3 id=\"making-the-data-accessible-to-alexa\">Making the Data Accessible to Alexa</h3><p>Alexa needs access to the temperature data for her to voice it back. An option would be to expose the Pi to the web for Alexa to access the data directly but that would involve running a web-server on the Pi and a lot of modified router configuration to expose the Pi to the public internet.</p><p>Instead, I realised that a public git repository could work as a novel place to store this data.Every time a temperature recording is made, the data can be committed to a repository and pushed to GitHub, then Alexa would be able to fetch the most recent recording from the raw content of the data file. It would also offer a full history of every temperature recording with delta compression for free.</p><p>Of course, open-sourcing my room temperature data could pose a security risk. It may be possible to infer when I am in the room or not from the data, and perhaps this could be used for malicious purposes…?</p><h4 id=\"setup\">Setup</h4><p>I created a new GitHub user and <a href=\"https://github.com/raspberry-commits/bedroom-temperature-api\">repository</a>, and added the public SSH key from the Pi to GitHub for commit access.</p><p><img src=\"/assets/rpi-temp-logger/github-repo.png\" alt=\"GitHub Repo\" /></p><p>The following script records the temperature data and pushes it to GitHub:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span><span class=\"kn\">import</span> <span class=\"nn\">json</span><span class=\"kn\">import</span> <span class=\"nn\">Adafruit_DHT</span><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"n\">interval</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">\"INTERVAL\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">))</span><span class=\"n\">measurement</span> <span class=\"o\">=</span> <span class=\"s\">\"rpi-dht22\"</span><span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"s\">\"bedroom\"</span><span class=\"c1\"># Temp sensor</span><span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">Adafruit_DHT</span><span class=\"p\">.</span><span class=\"n\">DHT22</span><span class=\"n\">sensor_gpio</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>        <span class=\"n\">humidity</span><span class=\"p\">,</span> <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">Adafruit_DHT</span><span class=\"p\">.</span><span class=\"n\">read_retry</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"p\">,</span> <span class=\"n\">sensor_gpio</span><span class=\"p\">)</span>        <span class=\"n\">humidity</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">humidity</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>        <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">temperature</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>        <span class=\"n\">iso</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">utcnow</span><span class=\"p\">().</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">'%Y-%m-%dT%H:%M:%SZ'</span><span class=\"p\">)</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"[%s] Temp: %s, Humidity: %s\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">iso</span><span class=\"p\">,</span> <span class=\"n\">temperature</span><span class=\"p\">,</span> <span class=\"n\">humidity</span><span class=\"p\">))</span>        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>            <span class=\"p\">{</span>                <span class=\"s\">\"measurement\"</span><span class=\"p\">:</span> <span class=\"n\">measurement</span><span class=\"p\">,</span>                <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>                    <span class=\"s\">\"location\"</span><span class=\"p\">:</span> <span class=\"n\">location</span><span class=\"p\">,</span>                <span class=\"p\">},</span>                <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"n\">iso</span><span class=\"p\">,</span>                <span class=\"s\">\"fields\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>                    <span class=\"s\">\"temperature\"</span><span class=\"p\">:</span> <span class=\"n\">temperature</span><span class=\"p\">,</span>                    <span class=\"s\">\"humidity\"</span><span class=\"p\">:</span> <span class=\"n\">humidity</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">]</span>        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"/home/pi/bedroom-temperature-api/temperature.json\"</span><span class=\"p\">,</span> <span class=\"s\">\"w\"</span><span class=\"p\">)</span>        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">sort_keys</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>        <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s\">\"cd /home/pi/bedroom-temperature-api &amp;&amp; \"</span>                  <span class=\"s\">\"git add temperature.json \"</span>                  <span class=\"s\">\"&amp;&amp; git commit -m '\"</span> <span class=\"o\">+</span> <span class=\"n\">iso</span> <span class=\"o\">+</span> <span class=\"s\">\"' \"</span>                  <span class=\"s\">\"&amp;&amp; git push origin master\"</span><span class=\"p\">)</span>        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"p\">)</span><span class=\"k\">except</span> <span class=\"nb\">KeyboardInterrupt</span><span class=\"p\">:</span>    <span class=\"k\">pass</span></code></pre></div></div><p>The data structure can be posted to Influx DB, which is where I was originally storing the data before the SD card on the Pi randomly corrupted.</p><p>This script can be run indefinitely in a screen:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>screen -d -m python3 rpi-temp-sensor/temp-logger-to-gh.py</code></pre></div></div><p>I added the command below to <code class=\"language-plaintext highlighter-rouge\">/etc/rc.local</code> so that it runs on system boot.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo su - pi -c \"screen -dm -S tempsensor python3 /home/pi/rpi-temp-sensor/temp-logger-to-gh.py\"</code></pre></div></div><h3 id=\"creating-the-alexa-skill\">Creating the Alexa Skill</h3><p>There are a lot of different ways to build an Alexa skill and it turns out to be a very vast and deep topic. I went down the route of adapting the simplest Hello World example to get things working, after all, I was only looking for Alexa to respond to one thing, I did not need a complex interaction model.</p><p>In the Alexa Developer console, I created a new custom skill called ‘Rpi Temperature Sensor’ and provisioned it with Alexa-Hosted Python backend resources.</p><p>Then I set the Skill Invocation Name (the name users say to invoke the skill) to ‘room temperature’. This allows me to say “Alexa, room temperature” for my skill, and thus code, to be executed.</p><p>Everything else I left as default.</p><p>As mentioned earlier, the code is based upon the <a href=\"https://github.com/alexa/skill-sample-python-helloworld-classes/blob/master/lambda/py/hello_world.py\">Hello World</a> example.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># -*- coding: utf-8 -*-</span><span class=\"kn\">import</span> <span class=\"nn\">logging</span><span class=\"kn\">import</span> <span class=\"nn\">ask_sdk_core.utils</span> <span class=\"k\">as</span> <span class=\"n\">ask_utils</span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.skill_builder</span> <span class=\"kn\">import</span> <span class=\"n\">SkillBuilder</span><span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.dispatch_components</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractRequestHandler</span><span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.dispatch_components</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractExceptionHandler</span><span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.handler_input</span> <span class=\"kn\">import</span> <span class=\"n\">HandlerInput</span><span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_model</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span><span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">LaunchRequestHandler</span><span class=\"p\">(</span><span class=\"n\">AbstractRequestHandler</span><span class=\"p\">):</span>    <span class=\"s\">\"\"\"Handler for Skill Launch.\"\"\"</span>    <span class=\"k\">def</span> <span class=\"nf\">can_handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler_input</span><span class=\"p\">):</span>        <span class=\"c1\"># type: (HandlerInput) -&gt; bool</span>        <span class=\"k\">return</span> <span class=\"n\">ask_utils</span><span class=\"p\">.</span><span class=\"n\">is_request_type</span><span class=\"p\">(</span><span class=\"s\">\"LaunchRequest\"</span><span class=\"p\">)(</span><span class=\"n\">handler_input</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler_input</span><span class=\"p\">):</span>        <span class=\"c1\"># type: (HandlerInput) -&gt; Response</span>        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://raw.githubusercontent.com/raspberry-commits/bedroom-temperature-api/master/temperature.json\"</span><span class=\"p\">)</span>        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>        <span class=\"n\">speak_output</span> <span class=\"o\">=</span> <span class=\"s\">'The temperature is %d degrees celcius (recorded %s)'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s\">'fields'</span><span class=\"p\">][</span><span class=\"s\">'temperature'</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">pretty_date</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s\">'time'</span><span class=\"p\">],</span> <span class=\"s\">'%Y-%m-%dT%H:%M:%SZ'</span><span class=\"p\">)))</span>        <span class=\"k\">return</span> <span class=\"p\">(</span>            <span class=\"n\">handler_input</span><span class=\"p\">.</span><span class=\"n\">response_builder</span>                <span class=\"p\">.</span><span class=\"n\">speak</span><span class=\"p\">(</span><span class=\"n\">speak_output</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"n\">response</span>        <span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">pretty_date</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">):</span>        <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>        <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">time</span>        <span class=\"n\">second_diff</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">seconds</span>        <span class=\"n\">day_diff</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">days</span>        <span class=\"k\">if</span> <span class=\"n\">day_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"s\">''</span>        <span class=\"k\">if</span> <span class=\"n\">day_diff</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"k\">if</span> <span class=\"n\">second_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"s\">\"just now\"</span>            <span class=\"k\">if</span> <span class=\"n\">second_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">second_diff</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s\">\" seconds ago\"</span>            <span class=\"k\">if</span> <span class=\"n\">second_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">120</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"s\">\"a minute ago\"</span>            <span class=\"k\">if</span> <span class=\"n\">second_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3600</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">second_diff</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s\">\" minutes ago\"</span>            <span class=\"k\">if</span> <span class=\"n\">second_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7200</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"s\">\"an hour ago\"</span>            <span class=\"k\">if</span> <span class=\"n\">second_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">86400</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">second_diff</span> <span class=\"o\">/</span> <span class=\"mi\">3600</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s\">\" hours ago\"</span>        <span class=\"k\">if</span> <span class=\"n\">day_diff</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"s\">\"Yesterday\"</span>        <span class=\"k\">if</span> <span class=\"n\">day_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">day_diff</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">\" days ago\"</span>        <span class=\"k\">if</span> <span class=\"n\">day_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">31</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">day_diff</span> <span class=\"o\">/</span> <span class=\"mi\">7</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s\">\" weeks ago\"</span>        <span class=\"k\">if</span> <span class=\"n\">day_diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">365</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">day_diff</span> <span class=\"o\">/</span> <span class=\"mi\">30</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s\">\" months ago\"</span>        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">day_diff</span> <span class=\"o\">/</span> <span class=\"mi\">365</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s\">\" years ago\"</span><span class=\"k\">class</span> <span class=\"nc\">CatchAllExceptionHandler</span><span class=\"p\">(</span><span class=\"n\">AbstractExceptionHandler</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">can_handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler_input</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"p\">):</span>        <span class=\"c1\"># type: (HandlerInput, Exception) -&gt; bool</span>        <span class=\"k\">return</span> <span class=\"bp\">True</span>    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler_input</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"p\">):</span>        <span class=\"c1\"># type: (HandlerInput, Exception) -&gt; Response</span>        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>        <span class=\"n\">speak_output</span> <span class=\"o\">=</span> <span class=\"s\">\"Sorry, I had trouble fetching the room temperature data. Please try again.\"</span>        <span class=\"k\">return</span> <span class=\"p\">(</span>            <span class=\"n\">handler_input</span><span class=\"p\">.</span><span class=\"n\">response_builder</span>                <span class=\"p\">.</span><span class=\"n\">speak</span><span class=\"p\">(</span><span class=\"n\">speak_output</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"n\">ask</span><span class=\"p\">(</span><span class=\"n\">speak_output</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"n\">response</span>        <span class=\"p\">)</span><span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"n\">SkillBuilder</span><span class=\"p\">()</span><span class=\"n\">sb</span><span class=\"p\">.</span><span class=\"n\">add_request_handler</span><span class=\"p\">(</span><span class=\"n\">LaunchRequestHandler</span><span class=\"p\">())</span><span class=\"n\">sb</span><span class=\"p\">.</span><span class=\"n\">add_exception_handler</span><span class=\"p\">(</span><span class=\"n\">CatchAllExceptionHandler</span><span class=\"p\">())</span><span class=\"n\">lambda_handler</span> <span class=\"o\">=</span> <span class=\"n\">sb</span><span class=\"p\">.</span><span class=\"n\">lambda_handler</span><span class=\"p\">()</span></code></pre></div></div><p>To keep things as simple as possible, I stripped back the example and added my custom code to the <code class=\"language-plaintext highlighter-rouge\">LaunchRequestHandler</code> class where the <code class=\"language-plaintext highlighter-rouge\">handle</code> method is executed when the skill is launched.</p><p>The code fetches the temperature data from GitHub and extracts it alongside a human-understandable time since recording for Alexa to speak. E.g.: “The temperature is 18 degrees celcius (recorded 1 minute ago)”.</p><p>I deployed this from the Alexa console without the need to publish to live. Considering I have no plans to make this public, deploying it to dev, to work on my Alexa alone is sufficient.</p><p>Now I believe it is possible to use the Alexa Smart Home skills as a basis to make the integration cleaner. For example, if I say, “Alexa, what is the room temperature?”, she gets confused and responds with “Bedroom doesn’t support that”. Ideally, Alexa would respond to that command using the Smart Home interaction model, but I decided building a full integration would take far more effort than I was willing to put in.</p><p>And that’s it! A Raspberry Pi Temperature sensor logging to GitHub with a very hacky Alexa skill providing a voice interface.</p>",
            "url": "https://finchmeister.github.io/blog20/2020/10/31/raspberry-pi-temp-logger",
            
            
            
            "tags": ["tech","python","raspberrypi"],
            
            "date_published": "2020-10-31T00:00:00+00:00",
            "date_modified": "2020-10-31T00:00:00+00:00",
            
                "author":  {
                "name": "Jonathan Finch",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://finchmeister.github.io/blog20/2019/08/02/git-commit-hash-number-theory",
            "title": "Git Commit Hash Number Theory",
            "summary": "How rare is an all digit commit hash?",
            "content_text": "Life as a programmer is often mundane. You start with a brief to make something happen on a screen. Spend hours upon hours sat at a desk, typing and tapping away, before eventually finding out the feature you’ve just lovingly crafted isn’t needed anymore. It means that small, out of the ordinary events in the software development process can catch one’s curiosity and lead to unexpected tangents in the pursuit of knowledge, such as ‘how rare is this all digit git commit hash I have just generated?’I was sure I had seen these things before, but I had no clue as to the significance of it, so I went on a journey to find out.At a high level, a git commit hash is a SHA1 hash of the state of the git repository at the time of the commit. A short git commit hash is an abbreviation of the hash to the first 7 characters, it is almost certainly unique within a repository and git will increase the number of characters used if it is not.To empirically find out the probability of an all digit hash, I wrote a simulation that generated a lot of SHA1 hashes and returned the percentage of the total which start with 7 digits.It takes just a single character in the hash subject to change for the hash output to be vastly different, (called the avalanche effect), so for ease I simply increment a counter (known as the nonce) to generate a new hash subject.As an aside, Bitcoin does something similar in its proof of work algorithm to generate blocks and prevent tampering to the blockchain. It relies on incrementing a counter and generating a hash based upon the transaction log until the resulting hash starts with a certain number of 0s (depending on the network difficulty). It is very easy to verify the hash but takes a lot of computational power to generate a valid one in the first place. This is known as the HashCash proof of work system.The PHP script:&lt;?phpfunction getShortHash(string $subject): string{    return substr(sha1($subject), 0, 7);}function isAllInt(string $subject): bool{    return preg_match('/^\\d{7}$/', $subject) === 1;}$n = 10000;$allInt = $notAllInt = 0;$randomBytes = random_bytes(10);for ($i = 0; $i &lt; $n; $i++) {    $subject = $randomBytes . $i;    $shortHash = getShortHash($subject);    if (isAllInt($shortHash)) {        $allInt++;    } else {        $notAllInt++;    }}$ratio = $allInt/$n * 100;echo \"All int: {$allInt}; Not all int: {$notAllInt}; All int: {$ratio} %\\n\";The results after running the script 5 times:All int: 387; Not all int: 9613; All int: 3.87 %All int: 408; Not all int: 9592; All int: 4.08 %All int: 356; Not all int: 9644; All int: 3.56 %All int: 374; Not all int: 9626; All int: 3.74 %All int: 357; Not all int: 9643; All int: 3.57 %We can see between 3.56% and 4.08% of random SHA1 hashes will start with 7 integers - roughly 1 in 27. In reality, all digit short hashes are not that rare.Let’s look a bit deeper as to why the probability of all integer short hashes is around 1 in 27.A SHA1 hash is represented here as a 40 character hexadecimal string. Each character in hexadecimal has 16 options, 0-9 or a-f. Assuming a SHA1 hash has a seemingly random output where each character is equally likely to be selected upon a hash, then the likelihood of the first character being an integer is 10/16, the second is also 10/16, and so on for the first 7 characters. We can calculate the probably like so:10/16 * 10/16 * 10/16 * 10/16 * 10/16 * 10/16 * 10/16 = (10/16)^7= 10000000/268435456= 0.03725290298i.e.: 3.725% or 1 in 26.67.3.725% fits within the range of values computed by the simulation, validating that the theory and the practice tie up.According to the law of large numbers, as we increase the number of trials, the average of the result will tend towards the true expected value. The mathematics tells us that the expected value is 3.725%, so let’s see what happens if we run the script with a much higher number of iterations.Upping the iterations of the script by 5000 to 500 million and running this on an oversized Google Cloud Platform VM we get:All int: 18630499; Not all int: 481369501; All int: 3.7260998 %Extremely close to the expected value, just a 0.02952483% difference. This demonstrates that the output of SHA1 algorithm is seemingly random even though we are only incrementing a counter in the hash subject - the avalanche effect. This is what we would expect from a hashing algorithm, if there were a correlation between the input and output, the hashing algorithm would be considered broken as it would open up the possibility of reversing a hash via a cryptanalytic attack.How about git hashes that are all letters?Naturally I considered how rare all letter short git hashes were:All letters: 12; Not all letters: 9988; All letters: 0.12 %All letters: 10; Not all letters: 9990; All letters: 0.1 %All letters: 14; Not all letters: 9986; All letters: 0.14 %All letters: 11; Not all letters: 9989; All letters: 0.11 %All letters: 7; Not all letters: 9993; All letters:: 0.07 %Following the same logic as before but with 6 possible characters (a-f) we get(6/16)^7 = 0.001042842865 ~ 0.1%. I.e., 1 in 959 commits.A much, much rarer event.What is the rarest commit hash I could find in the wild?I took a look at the biggest git repo I could think of, the Linux kernel, which at the time of writing was 2.5GB and had 856,459 commits. I extracted the commit hashes to a file then grepped for the longest starting sequence of letters and digits.~/linux$ git log --pretty=oneline | cut -c 1-40 &gt; git_log.log~/linux$ grep -E \"^[0-9]{27,}\" git_log.log 932505776779430053766113965c21cfb7ab823a287774414568010855642518513f085491644061~/linux$ grep -E \"^[a-z]{15,}\" git_log.log fdbdfefbabefcdf3f57560163b43fdc4cf95eb2fThere are some pretty unusual hashes there, two starting with 27 digits, a 1 in 324,518 chance, and one starting with 15 letters, a 1 in 2,452,059 chance. You’ve got more chances of winning £10,000 every month for one year with the National Lottery - Set For Life lottery 1 in 1,704,377 than getting a git commit hash that looks like that.Who’d have thought the life of a programmer was mundane now?",
            "content_html": "<p>Life as a programmer is often mundane. You start with a brief to make something happen on a screen. Spend hours upon hours sat at a desk, typing and tapping away, before eventually finding out the feature you’ve just lovingly crafted isn’t needed anymore. It means that small, out of the ordinary events in the software development process can catch one’s curiosity and lead to unexpected tangents in the pursuit of knowledge, such as ‘how rare is this <em>all digit</em> git commit hash I have just generated?’</p><p><img src=\"/assets/git-number-theory/shortgitcommit.png\" alt=\"Short commit\" /><img src=\"/assets/git-number-theory/gitcommit.png\" alt=\"Full commit\" /></p><p>I was sure I had seen these things before, but I had no clue as to the significance of it, so I went on a journey to find out.</p><p>At a high level, a git commit hash is a SHA1 hash of the state of the git repository at the time of the commit. A short git commit hash is an abbreviation of the hash to the first 7 characters, it is almost certainly unique within a repository and git will increase the number of characters used if it is not.</p><p>To empirically find out the probability of an all digit hash, I wrote a simulation that generated a lot of SHA1 hashes and returned the percentage of the total which start with 7 digits.</p><p>It takes just a single character in the hash subject to change for the hash output to be vastly different, (called the <em>avalanche effect</em>), so for ease I simply increment a counter (known as the <em>nonce</em>) to generate a new hash subject.</p><p>As an aside, Bitcoin does something similar in its proof of work algorithm to generate blocks and prevent tampering to the blockchain. It relies on incrementing a counter and generating a hash based upon the transaction log until the resulting hash starts with a certain number of 0s (depending on the network difficulty). It is very easy to verify the hash but takes a lot of computational power to generate a valid one in the first place. This is known as the <a href=\"https://en.bitcoin.it/wiki/Hashcash\">HashCash</a> proof of work system.</p><p>The PHP script:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?php</span><span class=\"k\">function</span> <span class=\"n\">getShortHash</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$subject</span><span class=\"p\">):</span> <span class=\"kt\">string</span><span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nb\">sha1</span><span class=\"p\">(</span><span class=\"nv\">$subject</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">function</span> <span class=\"n\">isAllInt</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"nv\">$subject</span><span class=\"p\">):</span> <span class=\"kt\">bool</span><span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nb\">preg_match</span><span class=\"p\">(</span><span class=\"s1\">'/^\\d{7}$/'</span><span class=\"p\">,</span> <span class=\"nv\">$subject</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"nv\">$n</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><span class=\"p\">;</span><span class=\"nv\">$allInt</span> <span class=\"o\">=</span> <span class=\"nv\">$notAllInt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nv\">$randomBytes</span> <span class=\"o\">=</span> <span class=\"nb\">random_bytes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nv\">$i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nv\">$i</span> <span class=\"o\">&lt;</span> <span class=\"nv\">$n</span><span class=\"p\">;</span> <span class=\"nv\">$i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nv\">$subject</span> <span class=\"o\">=</span> <span class=\"nv\">$randomBytes</span> <span class=\"mf\">.</span> <span class=\"nv\">$i</span><span class=\"p\">;</span>    <span class=\"nv\">$shortHash</span> <span class=\"o\">=</span> <span class=\"nf\">getShortHash</span><span class=\"p\">(</span><span class=\"nv\">$subject</span><span class=\"p\">);</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nf\">isAllInt</span><span class=\"p\">(</span><span class=\"nv\">$shortHash</span><span class=\"p\">))</span> <span class=\"p\">{</span>        <span class=\"nv\">$allInt</span><span class=\"o\">++</span><span class=\"p\">;</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>        <span class=\"nv\">$notAllInt</span><span class=\"o\">++</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nv\">$ratio</span> <span class=\"o\">=</span> <span class=\"nv\">$allInt</span><span class=\"o\">/</span><span class=\"nv\">$n</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"k\">echo</span> <span class=\"s2\">\"All int: </span><span class=\"si\">{</span><span class=\"nv\">$allInt</span><span class=\"si\">}</span><span class=\"s2\">; Not all int: </span><span class=\"si\">{</span><span class=\"nv\">$notAllInt</span><span class=\"si\">}</span><span class=\"s2\">; All int: </span><span class=\"si\">{</span><span class=\"nv\">$ratio</span><span class=\"si\">}</span><span class=\"s2\"> %</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">;</span></code></pre></div></div><p>The results after running the script 5 times:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>All int: 387<span class=\"p\">;</span> Not all int: 9613<span class=\"p\">;</span> All int: 3.87 %All int: 408<span class=\"p\">;</span> Not all int: 9592<span class=\"p\">;</span> All int: 4.08 %All int: 356<span class=\"p\">;</span> Not all int: 9644<span class=\"p\">;</span> All int: 3.56 %All int: 374<span class=\"p\">;</span> Not all int: 9626<span class=\"p\">;</span> All int: 3.74 %All int: 357<span class=\"p\">;</span> Not all int: 9643<span class=\"p\">;</span> All int: 3.57 %</code></pre></div></div><p>We can see between 3.56% and 4.08% of random SHA1 hashes will start with 7 integers - roughly 1 in 27. In reality, all digit short hashes are not that rare.</p><p>Let’s look a bit deeper as to <em>why</em> the probability of all integer short hashes is around 1 in 27.</p><p>A SHA1 hash is represented here as a 40 character hexadecimal string. Each character in hexadecimal has 16 options, 0-9 or a-f. Assuming a SHA1 hash has a seemingly random output where each character is equally likely to be selected upon a hash, then the likelihood of the first character being an integer is 10/16, the second is also 10/16, and so on for the first 7 characters. We can calculate the probably like so:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>10/16 * 10/16 * 10/16 * 10/16 * 10/16 * 10/16 * 10/16 = (10/16)^7= 10000000/268435456= 0.03725290298</code></pre></div></div><p>i.e.: 3.725% or 1 in 26.67.</p><p>3.725% fits within the range of values computed by the simulation, validating that the theory and the practice tie up.</p><p>According to the law of large numbers, as we increase the number of trials, the average of the result will tend towards the true expected value. The mathematics tells us that the expected value is 3.725%, so let’s see what happens if we run the script with a much higher number of iterations.</p><p>Upping the iterations of the script by 5000 to 500 million and running this on an oversized Google Cloud Platform VM we get:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>All int: 18630499; Not all int: 481369501; All int: 3.7260998 %</code></pre></div></div><p>Extremely close to the expected value, just a 0.02952483% difference. This demonstrates that the output of SHA1 algorithm is seemingly random even though we are only incrementing a counter in the hash subject - the <em>avalanche effect</em>. This is what we would expect from a hashing algorithm, if there were a correlation between the input and output, the hashing algorithm would be considered broken as it would open up the possibility of reversing a hash via a cryptanalytic attack.</p><h2 id=\"how-about-git-hashes-that-are-all-letters\">How about git hashes that are all letters?</h2><p>Naturally I considered how rare all letter short git hashes were:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>All letters: 12; Not all letters: 9988; All letters: 0.12 %All letters: 10; Not all letters: 9990; All letters: 0.1 %All letters: 14; Not all letters: 9986; All letters: 0.14 %All letters: 11; Not all letters: 9989; All letters: 0.11 %All letters: 7; Not all letters: 9993; All letters:: 0.07 %</code></pre></div></div><p>Following the same logic as before but with 6 possible characters (a-f) we get</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(6/16)^7 = 0.001042842865 ~ 0.1%. </code></pre></div></div><p>I.e., 1 in 959 commits.</p><p>A much, much rarer event.</p><h2 id=\"what-is-the-rarest-commit-hash-i-could-find-in-the-wild\">What is the rarest commit hash I could find in the wild?</h2><p>I took a look at the biggest git repo I could think of, the Linux kernel, which at the time of writing was 2.5GB and had 856,459 commits. I extracted the commit hashes to a file then grepped for the longest starting sequence of letters and digits.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/linux<span class=\"nv\">$ </span>git log <span class=\"nt\">--pretty</span><span class=\"o\">=</span>oneline | <span class=\"nb\">cut</span> <span class=\"nt\">-c</span> 1-40 <span class=\"o\">&gt;</span> git_log.log~/linux<span class=\"nv\">$ </span><span class=\"nb\">grep</span> <span class=\"nt\">-E</span> <span class=\"s2\">\"^[0-9]{27,}\"</span> git_log.log 932505776779430053766113965c21cfb7ab823a287774414568010855642518513f085491644061~/linux<span class=\"nv\">$ </span><span class=\"nb\">grep</span> <span class=\"nt\">-E</span> <span class=\"s2\">\"^[a-z]{15,}\"</span> git_log.log fdbdfefbabefcdf3f57560163b43fdc4cf95eb2f</code></pre></div></div><p>There are some pretty unusual hashes there, two starting with 27 digits, a 1 in 324,518 chance, and <a href=\"https://github.com/torvalds/linux/commit/fdbdfefbabefcdf3f57560163b43fdc4cf95eb2f\">one</a> starting with 15 letters, a 1 in 2,452,059 chance. You’ve got more chances of winning £10,000 every month for one year with the National Lottery - Set For Life lottery <a href=\"https://en.wikipedia.org/wiki/National_Lottery_(United_Kingdom)#Set_For_Life\">1 in 1,704,377</a> than getting a git commit hash that looks like that.</p><p>Who’d have thought the life of a programmer was mundane now?</p>",
            "url": "https://finchmeister.github.io/blog20/2019/08/02/git-commit-hash-number-theory",
            
            
            
            
            
            "date_published": "2019-08-02T00:00:00+00:00",
            "date_modified": "2019-08-02T00:00:00+00:00",
            
                "author":  {
                "name": "Jonathan Finch",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}